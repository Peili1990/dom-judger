<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.nv.dom.web.dao.player.PlayerMapper">

	<select id="getPlayerInfosDao" parameterType="long" resultType="PlayerInfo">
	
	<![CDATA[
		SELECT 
			dp.id AS playerId,
			dc.name AS characterName,
			dc.sex AS sex,
			dpr.is_sp AS isSp,
			dpr.identity_desc AS identityDesc,
			dpr.sign AS sign,
			dpr.is_special AS isSpecial,
			dpr.camp AS camp,
			dpr.position AS position,
			dpr.has_position AS hasPosition,
			dpr.is_life AS isLife,
			dpr.is_mute AS isMute
		FROM
			d_game dg, d_player dp, d_player_record dpr, d_character dc
		WHERE 
			dg.status > 2 AND dg.status != 9 AND dp.game_id=#{gameId} AND dp.id = dpr.player_id AND dpr.character_id = dc.id
		ORDER BY
			dpr.position
	]]>
	
	</select>
	
	<select id="getAlivePlayersDao" parameterType="long" resultType="PlayerInfo">
	
		SELECT
			dc.name AS characterName,
			dpr.is_life AS isLife,
			dpr.has_position AS hasPosition
		FROM
			d_player dp, d_player_record dpr, d_character dc
		WHERE 
			dp.id = dpr.player_id AND dpr.character_id = dc.id AND dp.game_id = #{gameId}
		ORDER BY
			dpr.position
	
	</select>
	
	<select id="getReplaceSkinDao" parameterType="long" resultType="PlayerReplaceSkin">
	
		SELECT 
			drs.id AS id,
			drs.character_name AS characterName,
			drs.character_avatar AS characterAvatar,
			drs.is_mute AS isMute
		FROM
			d_replace_skin drs
		WHERE
			drs.player_id = #{playerId}		
	
	</select>
	
	<insert id='createOrUpdateReplaceSkinDao' parameterType="PlayerReplaceSkin" useGeneratedKeys="true" keyProperty="id">

		<if test="id>0">
			UPDATE
				d_replace_skin drs
			SET
				drs.character_name = #{characterName},
				drs.character_avatar = #{characterAvatar},
				drs.is_mute = #{isMute}
			WHERE
				drs.id = #{id}
		</if>	
		<if test="id==0">
			INSERT INTO d_replace_skin(
				player_id,
				character_name,
				character_avatar,
				is_mute
			)
			VALUES(
				#{playerId},
				#{characterName},
				#{characterAvatar},
				0
			)
		</if>
	
	</insert>
	
	<delete id="deleteReplaceSkinDao" parameterType="long">
	
		DELETE FROM 
			d_replace_skin
		WHERE 
			id = #{skinId}
	
	</delete>
	
	<update id="updatePlayerStatus" parameterType="UpdatePlayerStatusDTO">
		
		UPDATE
			d_player
		SET
			status = #{status}
		WHERE
			game_id = #{gameId}
		<if test="includeJudger==false">
			AND role = "player" 
		</if>
	
	</update>
	
	<update id="updateOnePlayerStatus" parameterType="UpdatePlayerStatusDTO">
	
		UPDATE
			d_player
		SET
			status = #{status}
		WHERE
			id = #{playerId}
	
	</update>
	
	<insert id="insertPlayerOperationRecord" parameterType="PlayerOperationRecord" useGeneratedKeys="true" keyProperty="id">
	
		INSERT INTO d_player_operation_record(
			player_id,
			form_id,
			operation_id,
			param,
			operation_str,
			operator,
			is_done,
			create_time
		) VALUES (
			#{playerId},
			#{formId},
			#{operationId},
			#{param},
			#{operationStr},
			#{operator},
			#{isDone},
			NOW()
		)
	
	</insert>
	
	<update id="deletePlayerOperationRecord">
	
		UPDATE
			d_player_operation_record
		SET
			is_delete = 1
		WHERE
			form_id = #{formId} AND player_id = #{playerId} AND is_done = 0;	
	
	</update>
	
	<select id="getUserIdByPlayerId" parameterType="Long" resultType="Long">
	
		SELECT
			user_id
		FROM
			d_player
		WHERE
			id = #{playerId}
	
	</select>
	
	<insert id="insertPlayerFeedbackBatch">
	
		INSERT INTO d_player_feedback(
			form_id,
			operation_record_id,
			player_id,
			character_name,
			feedback,
			create_time
		)
		VALUES
			 <foreach item="item" index="index" collection="list" separator=",">
 			(
 			#{item.formId},
            #{item.operationRecordId},
            #{item.playerId},
            #{item.characterName},
            #{item.feedback},
            NOW()
            )
    		 </foreach>
	
	</insert>
	
	<select id="initPlayerOperation" parameterType="Integer" resultType="PlayerOperation">
	
		SELECT
			id AS operationId,
			times
		FROM
			d_operation_config
		WHERE
			sign = #{sign} AND 'condition' = 0
			
		
	</select>
	
	<insert id="insertPlayerOperation">
	
		INSERT INTO d_player_operation(
			player_id,
			operation_id,
			times
		)
		VALUES
			 <foreach item="item" index="index" collection="list" separator=",">
 			(
            #{item.playerId},
            #{item.operationId},
            #{item.times}
            )
    		 </foreach>
	
	</insert>
	
	<select id="getPlayerOperationList" resultType="PlayerOperation">
	
		SELECT
			doc.id AS operationId,
			doc.name AS operationName,
			doc.template,
			doc.multiple,
			dpo.times,
			doc.immediately 
		FROM
			d_operation_config doc, d_player_operation dpo
		WHERE
			dpo.operation_id = doc.id AND dpo.player_id = #{playerId} AND dpo.times > 0 AND doc.stage % #{stage} = 0 AND doc.condition = 0
	
	</select>
	
	<select id="getPlayerOperationRecord" resultType="PlayerOperationRecord">
	
		SELECT
			dpor.id AS id,
			doc.id AS operationId,
			dpor.param,
			dpor.operation_str AS operationStr,
			doc.name AS operationName,
			doc.template AS template,
			doc.immediately		
		FROM
			d_operation_config doc, d_player_operation_record dpor
		WHERE
			dpor.operation_id = doc.id AND dpor.player_id = #{playerId} AND dpor.is_done = 0 AND dpor.is_delete= 0 AND dpor.form_id = #{formId}			
	
	</select>
	
	<select id="getAllReplaceSkinDao" parameterType="Long" resultType="PlayerReplaceSkin">
	
		SELECT
			drs.player_id AS playerId,
			drs.character_name AS characterName
		FROM
			d_replace_skin drs, d_player dp
		WHERE
			drs.player_id = dp.id AND dp.game_id = #{gameId}
	
	</select>
	
	<select id="getCurGameAllOperation" parameterType="Long" resultType="PlayerOperationRecord">
	
		SELECT
			dpor.id,
			dpor.form_id AS formId,
			dpor.player_id AS playerId,
			dpor.operation_str AS operationStr,
			dpor.operator,
			dpor.is_done AS isDone,
			dpor.create_time AS createTime		
		FROM
			d_player_operation_record dpor, d_form df
		WHERE
			dpor.is_delete = 0 AND dpor.form_id = df.id AND df.game_id = #{gameId}
			<if test="formId>0">
				AND dpor.form_id = #{formId}
			</if>
		ORDER BY
			dpor.create_time
		DESC
	
	</select>
	
	<select id="getCurGameAllFeedback" parameterType="Long" resultType="PlayerFeedback">
	
		SELECT
			dpf.form_id AS formId,
			dpf.operation_record_id AS operationRecordId,
			dpf.player_id AS playerId,
			dpf.character_name AS characterName,
			dpf.feedback,
			dpf.create_time AS createTime
		FROM
			d_player_feedback dpf, d_form df
		WHERE
			dpf.form_id = df.id AND df.game_id = #{gameId}
		ORDER BY
			dpf.create_time
		DESC
	
	</select>
	
	<select id="getPlayerAllOperationList" parameterType="Long" resultType="PlayerOperation">
	
		SELECT
			doc.id AS operationId,
			doc.name AS operationName,
			dpo.times
		FROM
			d_player_operation dpo, d_operation_config doc
		WHERE
			dpo.operation_id = doc.id AND dpo.player_id = #{playerId}
	
	</select>
	
	<select id="getAllOperation" resultType="String">
	
		SELECT
			name
		FROM
			d_operation_config
	
	</select>
	
	<delete id="deletePlayerOperation" parameterType="Long">
	
		DELETE FROM
			d_player_operation
		WHERE
			player_id = #{playerId}
	
	</delete>
	
	<delete id="deletePlayerFeedback" parameterType="Long">
	
		DELETE FROM
			d_player_feedback
		WHERE
			operation_record_id = #{recordId}
	
	</delete>
	
	<update id="settleOperationBatch" parameterType="java.util.List">
		
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
				UPDATE 
					d_player_operation_record
				<set>
				  	is_done = 1
				</set>  	
				WHERE
				  	id = #{item}
		 </foreach>	
		
	</update>
	
	

</mapper>